#include <iostream>

struct Node 
{
    int data;
    Node* next = nullptr;

    Node(int data, Node* next = nullptr) 
    {
        this->data = data;
        this->next = next;
    }
};

class SinglyLinkedList {

    Node* head = nullptr;
    Node* tail = nullptr;
public:

    SinglyLinkedList() = default;    

    void free() 
    {
        Node* i = head;
        while(i != nullptr) 
        {
            Node* next = i->next;
            delete i;
            i = next;
        }
        
        head = nullptr;
        tail = nullptr;
    }



    ~SinglyLinkedList() 
    {
        free();
    }



    void copyLinkedList(const SinglyLinkedList& rhs) 
    {
        Node* i = rhs.head;
        while(i != nullptr) 
        {
            push_back(i->data);
            i = i->next;
        }
    }



    SinglyLinkedList& operator=(const SinglyLinkedList& rhs)
    {
        if (this != &rhs)
        {
            free();
            copyLinkedList(rhs);
        }
        
        return *this;
    }



    SinglyLinkedList(const SinglyLinkedList& rhs) 
    {
        copyLinkedList(rhs);
    }



    void push_front(int number) 
    {
        Node* newHead = new Node(number, head);
        head = newHead;
        if (tail == nullptr) 
        {
            tail = head;
        }
    }



    void push_back(int number) 
    {
        if (head == nullptr) 
        {
            head = new Node(number);
            tail = head;
        } 
        else 
        {
            tail->next = new Node(number);
            tail = tail->next;
        }
    }



    void print() const 
    {
        Node* i = head;
        while (i != nullptr) 
        {
            std::cout << i->data << " ";
            i = i->next;
        }
        std::cout<<std::endl;

    }



    int peek_front() 
    {
        if (head != nullptr) 
        {
            return head->data;
        } 
        return -1;
    }



    int peek_back() 
    {
        if (tail != nullptr) 
        {
            return tail->data;
        } 
        return -1;
    }



    void pop_front() 
    {
        if (head != nullptr) 
        {
            Node* oldHead = head;
            if (tail == head) 
            {
                tail = nullptr;
            }
            
            head = head->next;

            delete oldHead;
        } 
    }



    void pop_back() 
    {
        if (head != nullptr) 
        {
            if (head == tail) 
            {
                delete head;
                head = nullptr;
                tail = nullptr;

            }

            Node* i = head;
            while (i-> next != nullptr && i->next != tail) 
            {
                i = i->next;
            }

            delete i->next;
            i->next = nullptr;
            tail = i;

        } 
    }



    void insert(int number, int position) 
    {
        if (position == 0) 
        {
            push_front(number);
            return;
        }



        if (head == nullptr) 
        {
            return;
        }
        
        Node* current = head;
        Node* previous = nullptr;

        for (int i = 0; i < position; i++) 
        {
            if (current != nullptr) 
            {
                previous = current;
                current = current->next;
            } 
            else 
            {
                return;
            }

        }
        
        previous->next = new Node(number, current);

        if (tail == previous) 
        {
            tail = previous->next;
        }
    }

    int get(int position)
    {
        if (head == nullptr) 
        {
            return -1;
        }
        
        Node* current = head;

        for (int i = 0; i < position; i++) 
        {
            if (current->next != nullptr) 
            {
                current = current->next;
            } 
            else 
            {
                return -1;
            }

        }
        
        return current->data;
    }



    void remove(int position) 
    {
        if (position == 0) 
        {
            pop_front();
            return;
        }

        if (head == nullptr) 
        {
            return;
        }

        Node* current = head;
        Node* previous = nullptr;

        for (int i = 0; i < position; i++) 
        {

            if (current->next != nullptr) 
            {
                previous = current;
                current = current->next;
            } 
            else 
            {
                return;
            }

        }
        previous->next = current->next;

        if (tail == current) 
        {
            tail = previous;
        }
        
        delete current;
    }
    
};



int main() 
{
    SinglyLinkedList list;
    list.insert(0, 0);
    list.insert(1, 1);
    list.insert(2, 2);
    list.insert(3, 3);
    list.insert(4, 4);
    list.insert(5, 5);
    list.print();

}
